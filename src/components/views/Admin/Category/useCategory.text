import { LIMIT_DEFAULT, PAGE_DEFAULT } from "@/constants/list.constants";
import categoryServices from "@/services/category.Services";
import { useQuery } from "@tanstack/react-query";
import { useRouter } from "next/router";
import { useMemo } from "react";

const useCategory = () => {
    const router = useRouter();

    // const currentLimit = router.query.limit;
    const currentLimit = useMemo(() => {
        const limit = Number(router.query.limit);
        return isNaN(limit) ? LIMIT_DEFAULT : limit;
    }, [router.query.limit]);

    // const currentPage = router.query.page;
    const currentPage = useMemo(() => {
        const page = Number(router.query.page);
        return isNaN(page) ? PAGE_DEFAULT : page;
    }, [router.query.page]);

    // const currentSearch = router.query.search;
    const currentSearch = useMemo(() => {
        return typeof router.query.search === "string" ? router.query.search : "";
    }, [router.query.search]);

    // const setURL = () => {
    //     router.replace(
    //         {
    //             query: {
    //                 limit: currentLimit || LIMIT_DEFAULT,
    //                 page: currentPage || PAGE_DEFAULT,
    //                 search: currentSearch || "",
    //             },
    //         },
    //     );
    // };

    const setURL = () => {
        const newQuery = {
            limit: String(currentLimit),
            page: String(currentPage),
            search: currentSearch,
        };

        const isSame = Object.entries(newQuery).every(
            ([key, value]) => router.query[key] === value
        );

        if (!isSame && router.isReady) {
            router.replace({ query: newQuery }, undefined, { shallow: true });
        }
    };

    const getCategories = async () => {
        let params = `limit=${currentLimit}&page=${currentPage}`;
        if (currentSearch) {
            params += `&search=${currentSearch}`;
        }
        const res = await categoryServices.getCategories(params);
        const { data } = res;

        return data;
    };

    const {
        data: dataCategory,
        isLoading: isLoadingCategory,
        isRefetching: isRefetchingCategory,
        refetch: refetchCategory
    } = useQuery({
        queryKey: ["Category", currentPage, currentLimit, currentSearch],
        queryFn: () => getCategories(),
        enabled: router.isReady && !!currentPage && !!currentLimit,
    });

    return {
        setURL,
        currentLimit,
        currentPage,
        currentSearch,
        dataCategory,
        isLoadingCategory,
        isRefetchingCategory
    };
};

export default useCategory